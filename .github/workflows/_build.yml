name: Magento Build Workflow

on:
  workflow_call:
    secrets:
      COMPOSER_AUTH:
        required: true
    outputs:
      artifact_name:
        description: "Artifact file name"
        value: ${{ jobs.build.outputs.artifact_name }}
      artifact_url:
        description: "URL to the build artifact"
        value: ${{ jobs.build.outputs.artifact_url }}
      run_id:
        description: "ID of the build workflow run"
        value: ${{ jobs.build.outputs.run_id }}
      run_url:
        description: "URL to the build workflow run"
        value: ${{ jobs.build.outputs.run_url }}

jobs:
  build:
    name: Build Magento
    runs-on: ubuntu-latest
    outputs:
      artifact_name: ${{ steps.build-output.outputs.artifact_name }}
      artifact_url: ${{ steps.build-output.outputs.artifact_url }}
      run_url: ${{ steps.build-output.outputs.run_url }}
      run_id: ${{ steps.build-output.outputs.run_id }}

    steps:
      - name: Checkout latest tag
        id: checkout-latest-tag
        uses: actions/checkout@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          ref: main
          fetch-depth: 0
          persist-credentials: false

      - name: Composer install modules and updates
        id: composer-install
        env:
          COMPOSER_AUTH: ${{ secrets.COMPOSER_AUTH }}
        run: |
          composer install --no-dev --no-cache --no-interaction --optimize-autoloader --apcu-autoloader

      - name: Run setup di compile
        id: setup-di-compile
        run: bin/magento setup:di:compile -n

      - name: Generate static files
        id: static-content-deploy
        run: bin/magento setup:static-content:deploy -f -n

      - name: Debug with custom output
        id: debug
        run: bin/magento

      - name: Set version for complete build
        id: set-build-version
        run: | 
          echo "ARTIFACT_NAME=$(date +%Y%m%d%H%M).tar.gz" >> ${GITHUB_ENV}

      - name: Package build into tar archive
        id: tar-archive
        run: | 
          tar --ignore-failed-read --warning=no-file-changed \
            -czf "${{ env.ARTIFACT_NAME }}" \
            --exclude=".git" \
            --exclude=".github" \
            --exclude="app/etc/env.php" \
            --exclude="CHANGELOG*" \
            --exclude="${{ env.ARTIFACT_NAME }}" \
            .

      - name: Upload build artifact
        id: upload-artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_NAME }}
          
      - name: Find pre-release target PR
        if: ${{ always() }}
        id: find-pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pr=$(gh pr list \
            --repo "${GITHUB_REPOSITORY}" \
            --state open \
            --label "autorelease: pending" \
            --search "alpha in:title" \
            --json number \
            --limit 1 \
            --jq '.[0].number')
          echo "pr_number=$pr" >> ${GITHUB_OUTPUT}
          
      - name: Construct PR comment
        if: ${{ always() }}
        id: construct-comment
        run: |
          COMMENT=""
          declare -A job_icons=( ["success"]="🟢" ["failure"]="🔴" ["cancelled"]="⚫" )
          COMMENT+="${job_icons[${{ job.status }}]} BUILD STATUS: ${{ job.status }}\n\n"
          
          declare -A step_icons=( ["success"]="✔" ["failure"]="❌" ["cancelled"]="❌" )
          COMMENT+="${step_icons[${{ steps.composer-install.outcome }}]} Composer install ${{ steps.composer-install.outcome }}\n"
          COMMENT+="${step_icons[${{ steps.setup-di-compile.outcome }}]} Code compilation ${{ steps.setup-di-compile.outcome }}\n"
          COMMENT+="${step_icons[${{ steps.static-content-deploy.outcome }}]} Static content deploy ${{ steps.static-content-deploy.outcome }}\n"
          
          if [ "${{ job.status }}" == "success" ]; then
            COMMENT+="\n## Build and artifact details:\n"
            COMMENT+="- **ARTIFACT_ID**: ${{ steps.upload-artifact.outputs.artifact-id }}\n"
            COMMENT+="- **RUN_ID**: ${GITHUB_RUN_ID}\n"
            COMMENT+="- **ARTIFACT_NAME**: ${{ env.ARTIFACT_NAME }}\n"
            COMMENT+="- **RUN_URL**: https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}\n"
            COMMENT+="- **ARTIFACT_URL**: ${{ steps.upload-artifact.outputs.artifact-url }}\n"
          fi
          
          COMMENT+="\n@${GITHUB_REPOSITORY_OWNER} Please review this PR.\n"
          
          echo -e "${COMMENT}" > comment.txt

      - name: Add comment to PR
        id: add-pr-comment
        if: ${{ steps.find-pr.outputs.pr_number != '' && always() }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: | 
          gh pr comment ${{ steps.find-pr.outputs.pr_number }} --repo "${GITHUB_REPOSITORY}" --body-file comment.txt

      - name: Set build outputs
        id: build-output
        run: |
          echo "artifact_url=${{ steps.upload-artifact.outputs.artifact-url }}" >> ${GITHUB_OUTPUT}
          echo "run_url=https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"  >> ${GITHUB_OUTPUT}
          echo "artifact_name=${{ env.ARTIFACT_NAME }}" >> ${GITHUB_OUTPUT}
          echo "run_id=${GITHUB_RUN_ID}"  >> ${GITHUB_OUTPUT}
          
