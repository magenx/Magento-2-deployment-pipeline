name: Composer modules check

on:
  pull_request:
    types:
      - opened
      - synchronize
    paths:
      - "app/code/**"
      - "app/etc/di.xml"
      - "composer.json"

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  composer-install-validate:
    if: "${{ ! startsWith(github.head_ref, 'release-please') || ! contains(github.event.pull_request.labels.*.name, 'autorelease: pending') }}"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v4.2.2
        with:
          fetch-depth: 0

      - name: Create composer cache
        id: create-composer-cache
        uses: ./.github/actions/composer-cache

      - name: Checkout base branch
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v4.2.2
        with:
          ref: ${{ github.event.pull_request.base.ref }}
          path: base

      - name: Extract require block from base
        id: require-base
        run: |
          jq -r '.require | to_entries[] | "\(.key):\(.value)"' base/composer.json | sort > base/require_old.txt
          composer show --working-dir="base/" --locked -N >  base/locked_old.txt

      - name: Validate composer.json from PR
        id: composer-validate
        run: | 
          composer validate --no-check-all --no-check-lock --no-check-publish --no-check-version 

      - name: Extract require block from PR
        id: require-pr
        run: jq -r '.require | to_entries[] | "\(.key):\(.value)"' composer.json | sort > require_new.txt

      - name: Find new modules in require block
        id: find-new-modules
        run: |
          comm -13 base/require_old.txt require_new.txt > require.txt
          if [ ! -s require.txt ]; then
            echo "No new composer packages."
          else
            echo "⚠️ New composer packages require:"
            cat require.txt
            echo "require=true" >> ${GITHUB_OUTPUT}
          fi

      - name: Find removed modules in require block
        id: find-removed-modules
        run: |
          comm -23 base/require_old.txt require_new.txt > remove.txt
          if [ ! -s remove.txt ]; then
            echo "No packages removed."
          else
            echo "⚠️ Composer packages removed:"
            cat remove.txt
            echo "remove=true" >> ${GITHUB_OUTPUT}
          fi

      - uses: reviewdog/action-setup@e04ffabe3898a0af8d0fb1af00c188831c4b5893 #v1.3.2
        with:
          reviewdog_version: v0.20.3

      - name: New modules review comment to PR
        id: module-comment-pr
        if: ${{ steps.find-new-modules.outputs.new_modules == 'true' }}
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          MODULES=$(awk '{printf "- **%s**<br>", $0}' require.txt | sed 's/ $//')
          printf "composer.json: %s" "<br>$MODULES" \
          | reviewdog -efm="%f: %m" \
            -name=" NEW COMPOSER PACKAGES REQUIRE: " \
            -reporter=github-pr-review \
            -filter-mode=nofilter \
            -level=warning

      - name: Install dependencies
        id: composer-install
        if: ${{ steps.find-new-modules.outputs.require == 'true' }}
        env:
          COMPOSER_AUTH: ${{ secrets.COMPOSER_AUTH }}
        run: |
          while read module; do
            composer require "$module"
          done < require.txt
          composer install --no-dev --no-interaction 
          composer show --locked -N > locked_new.txt

      - name: Find new modules dependencies in composer lock
        id: find-new-modules-lock
        run: |
          comm -13 base/locked_old.txt locked_new.txt > locked.txt
          if [ ! -s locked.txt ]; then
            echo "No new composer dependency."
          else
            echo "⚠️ Including a required dependency:"
            cat locked.txt
            echo "locked=true" >> ${GITHUB_OUTPUT}
          fi

      - name: New modules review comment to PR
        id: module-lock-comment-pr
        if: ${{ steps.find-new-modules-lock.outputs.locked == 'true' }}
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          MODULES=$(awk '{printf "- **%s**<br>", $0}' locked.txt | sed 's/ $//')
          printf "composer.lock: %s" "<br>$MODULES" \
          | reviewdog -efm="%f: %m" \
            -name=" INCLUDING A REQUIRED DEPENDENCY: " \
            -reporter=github-pr-review \
            -filter-mode=nofilter \
            -level=warning

      - name: Extract Magento module names
        id: modules-new-names
        if: ${{ steps.find-new-modules.outputs.require == 'true' }}
        run: |
          while read module; do
            registration_file="vendor/$(echo ${module%:*})/registration.php"
            if [ -f "$registration_file" ]; then
              module_name=$(php -r "\$f=file_get_contents('$registration_file'); \
                preg_match('/ComponentRegistrar\:\:MODULE\,\s*\'([^\']+)\'/', \$f, \$m); \
                echo isset(\$m[1])?\$m[1]:'';")
              if [ ! -z "$module_name" ]; then
                echo "$module_name"
              fi
            fi
          done < ./locked.txt > ./magento_modules.txt
          echo "New Magento modules:"
          cat ./magento_modules.txt

      - name: Enable newly installed modules
        id: module-enable
        if: ${{ steps.find-new-modules.outputs.new_modules == 'true' }}
        run: |
          modules=$(awk '{print $1}' magento_modules.txt | xargs)
          bin/magento module:enable $modules -n --no-ansi -q 2>/dev/null || true

      - name: Magento compilation setup:di:compile
        id: compile
        uses: ./.github/actions/setup-di-compile
        with:
          composer_install: false
          composer_auth: ""
          composer_options: ""
          setup_compile_options: ""
          static_content_deploy: false
          static_content_deploy_options: ""
          debug_command: "bin/magento"
      
      - name: Check for lock file changes
        id: git-diff-composer-lock
        if: ${{ steps.find-new-modules.outputs.require == 'true' }}
        run: |
          echo "lock_changed=$(git diff --quiet composer.lock && echo false || echo true)" >> "${GITHUB_OUTPUT}"

      - name: Check for config.php changes
        id: git-diff-config
        if: ${{ steps.find-new-modules.outputs.require == 'true' }}
        run: |
          echo "config_changed=$(git diff --quiet app/etc/config.php && echo false || echo true)" >> "${GITHUB_OUTPUT}"

      - name: Commit updated config.php back to PR branch
        id: config-commit
        if: ${{ steps.git-diff-config.outputs.config_changed == 'true' }}
        uses: stefanzweifel/git-auto-commit-action@778341af668090896ca464160c2def5d1d1a3eb0 #v6.0.1
        with:
          commit_message: "chore(config): Update app/etc/config.php after module enable"
          file_pattern: app/etc/config.php

      - name: Commit updated composer.lock back to PR branch
        id: composer-lock-commit
        if: ${{ steps.git-diff-composer-lock.outputs.lock_changed == 'true' }}
        uses: stefanzweifel/git-auto-commit-action@778341af668090896ca464160c2def5d1d1a3eb0 #v6.0.1
        with:
          commit_message: "chore(composer): Update composer.lock to match composer.json"
          file_pattern: composer.lock
