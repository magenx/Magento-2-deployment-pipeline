name: Magenx CI/CD

on:
  push:
    branches: 
      - main
    paths-ignore:
      - '**.md'
      - '**.txt'
      - '.github/**.yml'

permissions:
  contents: write
  issues: write
  pull-requests: write
  repository-projects: read
  actions: read
  
env:
  RELEASES_FOLDER: "releases"
  PRERELEASE_TYPE: "alpha"
  PRERELEASE_CONFIG: ".github/.release-please-config-prerelease.json"
  PRERELEASE_MANIFEST: ".github/.release-please-manifest-prerelease.json"
  RELEASE_CONFIG: ".github/.release-please-config.json"
  RELEASE_MANIFEST: ".github/.release-please-manifest.json"
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  

concurrency:
  group: release

jobs:

  pre-release-pr:
    name: Create pre-release PR
    runs-on: ubuntu-latest
    outputs:
      releases_created: ${{ steps.release.outputs.releases_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - name: Create pre-release
        id: release
        uses: googleapis/release-please-action@v4.2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          config-file: ${{ env.PRERELEASE_CONFIG }}
          manifest-file: ${{ env.PRERELEASE_MANIFEST }}

  pre-release-validate:
    if: ${{ needs.pre-release-pr.outputs.releases_created == 'false' }}
    needs: pre-release-pr
    uses: ./.github/workflows/_build.yml
    secrets:
      COMPOSER_AUTH: ${{ secrets.COMPOSER_AUTH }}
          
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    environment: staging
    needs: pre-release-validate
    steps:
      - name: Upload to S3
        id: deployment-upload
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          gh run download ${{ needs.pre-release-validate.outputs.run_id }} \
            --repo "${GITHUB_REPOSITORY}" \
            --name ${{ needs.pre-release-validate.outputs.artifact_name }} \
            --dir ./${GITHUB_RUN_ID}/
          
          aws --endpoint-url https://${{ secrets.S3_ENDPOINT }} \
            s3 cp ./${GITHUB_RUN_ID}/${{ needs.pre-release-validate.outputs.artifact_name }} \
            s3://${{ secrets.S3_BUCKET }}/${RELEASES_FOLDER}/${{ needs.pre-release-validate.outputs.artifact_name }}

      - name: Trigger webhook
        id: deployment-webhook
        run: |
          curl -X POST ${{ secrets.DEPLOY_WEBHOOK_URL }} \
            -H "Content-Type: application/json" \
            -H "X-Webhook-Secret: ${{ secrets.DEPLOY_WEBHOOK_SECRET }}" \
            -d '{"artifact_name": "${{ needs.pre-release-validate.outputs.artifact_name }}"}'

      - name: Add comment to PR
        id: add-pr-comment
        if: ${{ always() }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: | 
          COMMENT=""
          declare -A step_icons=( ["success"]="✔" ["failure"]="❌" ["cancelled"]="❌" )
          COMMENT+="${step_icons[${{ steps.deployment-upload.outcome }}]} Deployment upload: ${{ steps.deployment-upload.outcome }}\n"
          COMMENT+="${step_icons[${{ steps.deployment-webhook.outcome }}]} Deployment webhook: ${{ steps.deployment-webhook.outcome }}\n"
          echo -e "${COMMENT}" > deployment.txt
          gh pr comment ${{ needs.pre-release-validate.outputs.pre_pr_number }} --repo "${GITHUB_REPOSITORY}" --body-file deployment.txt

  pre-release:
    name: Publish pre-release then release PR
    runs-on: ubuntu-latest
    if: ${{ needs.pre-release-pr.outputs.releases_created == 'true' && contains(needs.pre-release-pr.outputs.tag_name, 'alpha') }}
    needs: pre-release-pr
    steps:
      - name: Pre-release publishing
        id: find-pr
        run: |
          pr=$(gh pr list \
            --repo "${GITHUB_REPOSITORY}" \
            --state merged \
            --label "autorelease: tagged" \
            --search "${PRERELEASE_TYPE} in:title" \
            --json number,mergedAt \
            | jq -r 'sort_by(.mergedAt) | reverse | .[0].number')
          echo "pr_number=$pr" >> ${GITHUB_OUTPUT}

      - name: Find artifact id
        id: extract-artifact-id
        run: |
          comments=$(gh pr view ${{ steps.find-pr.outputs.pr_number }} \
            --repo "${GITHUB_REPOSITORY}" \
            --json comments \
            --jq '.comments')
          run_id=$(echo "$comments" \
            | jq -r '.[] | select(.body | contains("RUN_ID")) .body' \
            | grep -oP "RUN_ID.*: \K[0-9]+" | tail -n1)
          artifact_name=$(echo "$comments" \
            | jq -r '.[] | select(.body | contains("ARTIFACT_NAME")) .body' \
            | grep -oP "ARTIFACT_NAME.*: \K[0-9].+\.gz" | tail -n1)
          echo "run_id=$run_id" >> ${GITHUB_OUTPUT}
          echo "artifact_name=$artifact_name" >> ${GITHUB_OUTPUT}

      - name: Download artifact id
        id: download-artifact
        run: | 
          mkdir -p ./${{ steps.extract-artifact-id.outputs.run_id }}
          gh run download ${{ steps.extract-artifact-id.outputs.run_id }} \
            --repo "${GITHUB_REPOSITORY}" \
            --name ${{ steps.extract-artifact-id.outputs.artifact_name }} \
            --dir ./${{ steps.extract-artifact-id.outputs.run_id }}/

      - name: Attach build archive
        id: attach-artifact
        run: |
          gh --repo "${GITHUB_REPOSITORY}" release upload ${{ needs.pre-release-pr.outputs.tag_name }} \
            ./${{ steps.extract-artifact-id.outputs.run_id }}/${{ steps.extract-artifact-id.outputs.artifact_name }}

      - name: Create release PR
        if: ${{ always() }}
        uses: googleapis/release-please-action@v4.2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          config-file: ${{ env.RELEASE_CONFIG }}
          manifest-file: ${{ env.RELEASE_MANIFEST }}
          


  after-pre-release:
    name: After pre-release cleanup
    runs-on: ubuntu-latest
    needs: pre-release
    steps:
      - name: After pre-release cleanup
        run: |
          echo "Running after-pre-release cleanup"


  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: ${{ needs.pre-release-pr.outputs.releases_created == 'true' && !contains(needs.pre-release-pr.outputs.tag_name, 'alpha') }}
    needs: pre-release-pr
    steps:
      - name: Create release
        run: |
          echo "Create release"


  after-release:
    name: After release cleanup
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: After release cleanup
        run: |
          echo "After release cleanup"
