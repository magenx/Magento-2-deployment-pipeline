name: Deploy to environment

on:
  repository_dispatch:
    types: [deployment]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.client_payload.environment }}
    steps:
      - name: Find ${{ github.event.client_payload.environment }} release PR
        id: find-pr
        if: ${{ github.event.client_payload.environment == 'staging' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pr_number=$(gh pr list \
            --repo "${GITHUB_REPOSITORY}" \
            --state open \
            --label "autorelease: pending" \
            --search "-in:title alpha" \
            --json number \
            --limit 1 \
            --jq '.[0].number')
          echo "pr_number=$pr_number" >> ${GITHUB_OUTPUT}

      - name: Download assets from release
        id: assets-download
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release download ${{ github.event.client_payload.tag_name }} \
            --repo "${GITHUB_REPOSITORY}" \
            --pattern "${{ github.event.client_payload.artifact_name }}" \
            --dir ./${GITHUB_RUN_ID}/

      - name: Upload release assets to S3 storage
        id: assets-upload
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws --endpoint-url https://${{ secrets.S3_ENDPOINT }} \
            s3 cp ./${GITHUB_RUN_ID}/${{ github.event.client_payload.artifact_name }} \
            s3://${{ secrets.S3_BUCKET }}/releases/${{ github.event.client_payload.artifact_name }}

      - name: Trigger webhook to start deployment
        id: deployment-webhook
        run: |
          curl -X POST ${{ secrets.DEPLOY_WEBHOOK_URL }} \
            -H "Content-Type: application/json" \
            -H "X-Webhook-Secret: ${{ secrets.DEPLOY_WEBHOOK_SECRET }}" \
            -d '{
                "pr_number": "${{ github.event.client_payload.pr_number }}",
                "run_id": "${{ github.event.client_payload.run_id  }}",
                "artifact_name": "${{ github.event.client_payload.artifact_name }}",
                "artifact_digest": "${{ github.event.client_payload.artifact_digest }}"
          }'

      - name: Comment about deployment status
        id: deployment-status-comment
        if: ${{ always() }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: | 
          COMMENT=""
          declare -A step_icons=( ["success"]="✔️" ["failure"]="❌" ["skipped"]="➖"  ["cancelled"]="✖️" )
          COMMENT+="## 🚀 Staging release deployment status:\n"
          COMMENT+="${step_icons[${{ steps.assets-download.outcome }}]} Download assets from ${{ github.job.environment.name }} release: ${{ steps.assets-download.outcome }}\n"
          COMMENT+="${step_icons[${{ steps.assets-upload.outcome }}]} Upload assets to S3 storage: ${{ steps.assets-upload.outcome }}\n"
          COMMENT+="${step_icons[${{ steps.deployment-webhook.outcome }}]} Deployment webhook event trigger: ${{ steps.deployment-webhook.outcome }}\n"
          echo -e "${COMMENT}" > deployment.txt
          DEPLOYMENT_STATUS=$(cat deployment.txt)
          echo "deployment_status<<EOF" >> $GITHUB_ENV
          echo "$DEPLOYMENT_STATUS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      
      - name: Add comment about deployment status
        id: deployment-status
        if: ${{ github.event.client_payload.environment == 'staging' }}
        run: | 
          gh pr comment ${{ steps.find-pr.outputs.pr_number }} \
          --repo "${GITHUB_REPOSITORY}" \
          --body-file deployment.txt

      - name: Find existing issue
        id: find-issues
        if: ${{ github.event.client_payload.environment != 'staging' }}
        uses: actions-cool/issues-helper@a610082f8ac0cf03e357eb8dd0d5e2ba075e017e #v3.6.0
        with:
          actions: 'find-issues'
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-creator: 'github-actions[bot]'
          issue-state: 'open'
          title-includes: 'Production release deployment status'
          labels: 'release'
          exclude-labels: 'overdue'

      - name: Process found issues
        id: found-issues
        run: |
          printf '%s' '${{ steps.find-issues.outputs.issues }}' > issues.txt
          ISSUE_NUMBERS=$(grep -oP '(?<=number":)\d+' issues.txt | paste -sd,)
          echo "issue_numbers=${ISSUE_NUMBERS}" >> $GITHUB_OUTPUT

      - name: Add labels
        id: issue-labeler
        if: ${{ steps.found-issues.outputs.issue_numbers != '' }}
        uses: actions-cool/issues-helper@a610082f8ac0cf03e357eb8dd0d5e2ba075e017e #v3.6.0
        with:
          actions: 'add-labels'
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ steps.found-issues.outputs.issue_numbers }}
          labels: 'overdue'

      - name: Set current date
        id: date
        run: echo "date=$(date +%Y-%m-%d-%H:%M)" >> $GITHUB_OUTPUT

      - name: Create and maintain issue
        uses: actions-cool/issues-helper@a610082f8ac0cf03e357eb8dd0d5e2ba075e017e #v3.6.0
        id: issue
        with:
          actions: 'create-issue'
          token: ${{ secrets.GITHUB_TOKEN }}
          title: 'Production release deployment status: ${{ job.status }}'
          body: |
            ## 🚀 Production release deployment status:
              
            ${{ env.deployment_status }}
              
              
            generated on: [${{ steps.date.outputs.date }}]
            [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          labels: 'releases,deployment'
          assignees: ${{ github.repository_owner }}

