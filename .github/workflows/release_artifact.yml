name: "Sync build to production release"

on:
  release:
    types: [published]

jobs:
  attach-artifact:
    if: "${{ github.event.release.prerelease == false }}"
    runs-on: ubuntu-latest
    steps:
      - name: Find previous pre-release tag
        id: pre-release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag=$(gh release list \
            --repo "${GITHUB_REPOSITORY}" \
            --exclude-drafts \
            --json tagName,isPrerelease \
            --jq '[ .[] | select(.isPrerelease and .tagName != ${{ github.event.release.tag_name }}) ][0].tagName')
          echo "tag_name=$tag" >> $GITHUB_OUTPUT

      - name: Find stable asset in previous pre-release
        id: find-asset
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          name=$(gh release view \
            --repo "${GITHUB_REPOSITORY}" \
            "${{ steps.pre-release.outputs.tag }}" \
            --json assets --jq '.assets[] | select(.name | test("^release_[0-9]{12}\\.tar\\.gz$")) | .name')
          echo "asset_name=$name" >> $GITHUB_OUTPUT

      - name: Download .tar.gz asset from previous pre-release
        id: download-asset
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release download "${{ steps.pre-release.outputs.tag_name }}" \
            --repo "${GITHUB_REPOSITORY}" \
            --pattern "${{ steps.find-asset.outputs.asset_name }}" \
            --repo "$GITHUB_REPOSITORY"

      - name: Attach assets to release
        id: upload-asset
        uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8 #v2.3.2
        with:
          tag_name: ${{ github.event.release.tag_name }}
          files: ${{ steps.find-asset.outputs.asset_name }}

      - name: Trigger post-release workflow
        id: payload
        uses: peter-evans/repository-dispatch@ff45666b9427631e3450c54a1bcbee4d9ff4d7c0 #v3.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: deployment
          client-payload: |-
            {
              "environment": "production",
              "asset_name": "${{ steps.find-asset.outputs.asset_name }}",
              "asset_digest": "${{ fromJSON(steps.upload-asset.outputs.assets)[0].digest }}",
              "tag_name": "${{ github.event.release.tag_name }}"
            }
